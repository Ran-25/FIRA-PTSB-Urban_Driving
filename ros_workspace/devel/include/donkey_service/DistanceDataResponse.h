// Generated by gencpp from file donkey_service/DistanceDataResponse.msg
// DO NOT EDIT!


#ifndef DONKEY_SERVICE_MESSAGE_DISTANCEDATARESPONSE_H
#define DONKEY_SERVICE_MESSAGE_DISTANCEDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace donkey_service
{
template <class ContainerAllocator>
struct DistanceDataResponse_
{
  typedef DistanceDataResponse_<ContainerAllocator> Type;

  DistanceDataResponse_()
    : datarequest(0)  {
    }
  DistanceDataResponse_(const ContainerAllocator& _alloc)
    : datarequest(0)  {
  (void)_alloc;
    }



   typedef int8_t _datarequest_type;
  _datarequest_type datarequest;





  typedef boost::shared_ptr< ::donkey_service::DistanceDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::donkey_service::DistanceDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DistanceDataResponse_

typedef ::donkey_service::DistanceDataResponse_<std::allocator<void> > DistanceDataResponse;

typedef boost::shared_ptr< ::donkey_service::DistanceDataResponse > DistanceDataResponsePtr;
typedef boost::shared_ptr< ::donkey_service::DistanceDataResponse const> DistanceDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::donkey_service::DistanceDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::donkey_service::DistanceDataResponse_<ContainerAllocator1> & lhs, const ::donkey_service::DistanceDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.datarequest == rhs.datarequest;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::donkey_service::DistanceDataResponse_<ContainerAllocator1> & lhs, const ::donkey_service::DistanceDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace donkey_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::donkey_service::DistanceDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::donkey_service::DistanceDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::donkey_service::DistanceDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd72dc7f3ab95b8a0d20f092cbdcef1d";
  }

  static const char* value(const ::donkey_service::DistanceDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd72dc7f3ab95b8aULL;
  static const uint64_t static_value2 = 0x0d20f092cbdcef1dULL;
};

template<class ContainerAllocator>
struct DataType< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "donkey_service/DistanceDataResponse";
  }

  static const char* value(const ::donkey_service::DistanceDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response params\n"
"byte datarequest\n"
"\n"
;
  }

  static const char* value(const ::donkey_service::DistanceDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.datarequest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistanceDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::donkey_service::DistanceDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::donkey_service::DistanceDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "datarequest: ";
    Printer<int8_t>::stream(s, indent + "  ", v.datarequest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DONKEY_SERVICE_MESSAGE_DISTANCEDATARESPONSE_H
