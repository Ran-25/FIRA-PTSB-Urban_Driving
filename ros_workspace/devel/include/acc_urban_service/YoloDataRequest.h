// Generated by gencpp from file acc_urban_service/YoloDataRequest.msg
// DO NOT EDIT!


#ifndef ACC_URBAN_SERVICE_MESSAGE_YOLODATAREQUEST_H
#define ACC_URBAN_SERVICE_MESSAGE_YOLODATAREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace acc_urban_service
{
template <class ContainerAllocator>
struct YoloDataRequest_
{
  typedef YoloDataRequest_<ContainerAllocator> Type;

  YoloDataRequest_()
    : dataresponse(0)  {
    }
  YoloDataRequest_(const ContainerAllocator& _alloc)
    : dataresponse(0)  {
  (void)_alloc;
    }



   typedef int8_t _dataresponse_type;
  _dataresponse_type dataresponse;





  typedef boost::shared_ptr< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct YoloDataRequest_

typedef ::acc_urban_service::YoloDataRequest_<std::allocator<void> > YoloDataRequest;

typedef boost::shared_ptr< ::acc_urban_service::YoloDataRequest > YoloDataRequestPtr;
typedef boost::shared_ptr< ::acc_urban_service::YoloDataRequest const> YoloDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::acc_urban_service::YoloDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::acc_urban_service::YoloDataRequest_<ContainerAllocator1> & lhs, const ::acc_urban_service::YoloDataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.dataresponse == rhs.dataresponse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::acc_urban_service::YoloDataRequest_<ContainerAllocator1> & lhs, const ::acc_urban_service::YoloDataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace acc_urban_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8e1ed04d7ba0e0327b8fd9f5c992770";
  }

  static const char* value(const ::acc_urban_service::YoloDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8e1ed04d7ba0e03ULL;
  static const uint64_t static_value2 = 0x27b8fd9f5c992770ULL;
};

template<class ContainerAllocator>
struct DataType< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acc_urban_service/YoloDataRequest";
  }

  static const char* value(const ::acc_urban_service::YoloDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 dataresponse\n"
;
  }

  static const char* value(const ::acc_urban_service::YoloDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dataresponse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::acc_urban_service::YoloDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::acc_urban_service::YoloDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "dataresponse: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dataresponse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACC_URBAN_SERVICE_MESSAGE_YOLODATAREQUEST_H
